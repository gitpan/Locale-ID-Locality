NAME
    Locale::ID::Locality - List of localities (cities/regencies) in
    Indonesia

VERSION
    This document describes version 0.06 of Locale::ID::Locality (from Perl
    distribution Locale-ID-Locality), released on 2014-08-16.

SYNOPSIS
     use Locale::ID::Locality qw(list_id_localities);
     my $res = list_id_localities(detail=>1);

DESCRIPTION
    This module provides API access for list of localities
    (cities/regencies) in Indonesia. Data is currently retrieved from the
    gudang-data-interim repository at
    https://github.com/sharyanto/gudang-data-interim/tree/master/data/ind_lo
    cality/

    This module's functions have Rinci specs.

FUNCTIONS
    None are exported by default, but they are exportable.

  list_id_localities(%args) -> [status, msg, result, meta]
    Localities (cities & regencies) in Indonesia.

    REPLACE ME

    Arguments ('*' denotes required arguments):

    *   bps_code => *int*

        Only return records where the 'bps_code' field equals specified
        value.

    *   bps_code.in => *array*

        Only return records where the 'bps_code' field is in the specified
        values.

    *   bps_code.is => *int*

        Only return records where the 'bps_code' field equals specified
        value.

    *   bps_code.isnt => *int*

        Only return records where the 'bps_code' field does not equal
        specified value.

    *   bps_code.max => *int*

        Only return records where the 'bps_code' field is less than or equal
        to specified value.

    *   bps_code.min => *int*

        Only return records where the 'bps_code' field is greater than or
        equal to specified value.

    *   bps_code.not_in => *array*

        Only return records where the 'bps_code' field is not in the
        specified values.

    *   bps_code.xmax => *int*

        Only return records where the 'bps_code' field is less than
        specified value.

    *   bps_code.xmin => *int*

        Only return records where the 'bps_code' field is greater than
        specified value.

    *   bps_prov_code => *int*

        Only return records where the 'bps_prov_code' field equals specified
        value.

    *   bps_prov_code.in => *array*

        Only return records where the 'bps_prov_code' field is in the
        specified values.

    *   bps_prov_code.is => *int*

        Only return records where the 'bps_prov_code' field equals specified
        value.

    *   bps_prov_code.isnt => *int*

        Only return records where the 'bps_prov_code' field does not equal
        specified value.

    *   bps_prov_code.max => *int*

        Only return records where the 'bps_prov_code' field is less than or
        equal to specified value.

    *   bps_prov_code.min => *int*

        Only return records where the 'bps_prov_code' field is greater than
        or equal to specified value.

    *   bps_prov_code.not_in => *array*

        Only return records where the 'bps_prov_code' field is not in the
        specified values.

    *   bps_prov_code.xmax => *int*

        Only return records where the 'bps_prov_code' field is less than
        specified value.

    *   bps_prov_code.xmin => *int*

        Only return records where the 'bps_prov_code' field is greater than
        specified value.

    *   detail => *bool* (default: 0)

        Return array of full records instead of just ID fields.

        By default, only the key (ID) field is returned per result entry.

    *   fields => *array* (default: "ind_name")

        Select fields to return.

    *   ind_name => *str*

        Only return records where the 'ind_name' field equals specified
        value.

    *   ind_name.contains => *str*

        Only return records where the 'ind_name' field contains specified
        text.

    *   ind_name.in => *array*

        Only return records where the 'ind_name' field is in the specified
        values.

    *   ind_name.is => *str*

        Only return records where the 'ind_name' field equals specified
        value.

    *   ind_name.isnt => *str*

        Only return records where the 'ind_name' field does not equal
        specified value.

    *   ind_name.max => *str*

        Only return records where the 'ind_name' field is less than or equal
        to specified value.

    *   ind_name.min => *str*

        Only return records where the 'ind_name' field is greater than or
        equal to specified value.

    *   ind_name.not_contains => *str*

        Only return records where the 'ind_name' field does not contain
        specified text.

    *   ind_name.not_in => *array*

        Only return records where the 'ind_name' field is not in the
        specified values.

    *   ind_name.xmax => *str*

        Only return records where the 'ind_name' field is less than
        specified value.

    *   ind_name.xmin => *str*

        Only return records where the 'ind_name' field is greater than
        specified value.

    *   q => *str*

        Search.

    *   random => *bool* (default: 0)

        Return records in random order.

    *   result_limit => *int*

        Only return a certain number of records.

    *   result_start => *int* (default: 1)

        Only return starting from the n'th record.

    *   sort => *str*

        Order records according to certain field(s).

        A list of field names separated by comma. Each field can be prefixed
        with '-' to specify descending order instead of the default
        ascending.

    *   type => *int*

        Only return records where the 'type' field equals specified value.

    *   type.in => *array*

        Only return records where the 'type' field is in the specified
        values.

    *   type.is => *int*

        Only return records where the 'type' field equals specified value.

    *   type.isnt => *int*

        Only return records where the 'type' field does not equal specified
        value.

    *   type.max => *int*

        Only return records where the 'type' field is less than or equal to
        specified value.

    *   type.min => *int*

        Only return records where the 'type' field is greater than or equal
        to specified value.

    *   type.not_in => *array*

        Only return records where the 'type' field is not in the specified
        values.

    *   type.xmax => *int*

        Only return records where the 'type' field is less than specified
        value.

    *   type.xmin => *int*

        Only return records where the 'type' field is greater than specified
        value.

    *   with_field_names => *bool*

        Return field names in each record (as hash/associative array).

        When enabled, function will return each record as hash/associative
        array (field name => value pairs). Otherwise, function will return
        each record as list/array (field value, field value, ...).

    Return value:

    Returns an enveloped result (an array).

    First element (status) is an integer containing HTTP status code (200
    means OK, 4xx caller error, 5xx function error). Second element (msg) is
    a string containing error message, or 'OK' if status is 200. Third
    element (result) is optional, the actual result. Fourth element (meta)
    is called result metadata and is optional, a hash that contains extra
    information.

     (any)

SEE ALSO
    list-id-localities

    Gudang Data Interim project,
    https://github.com/sharyanto/gudang-data-interim/

    This API will also be available on GudangAPI, http://gudangapi.com/

HOMEPAGE
    Please visit the project's homepage at
    <https://metacpan.org/release/Locale-ID-Locality>.

SOURCE
    Source repository is at
    <https://github.com/sharyanto/perl-Locale-ID-Locality>.

BUGS
    Please report any bugs or feature requests on the bugtracker website
    <https://rt.cpan.org/Public/Dist/Display.html?Name=Locale-ID-Locality>

    When submitting a bug or request, please include a test-file or a patch
    to an existing test-file that illustrates the bug or desired feature.

AUTHOR
    Steven Haryanto <stevenharyanto@gmail.com>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2014 by Steven Haryanto.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

